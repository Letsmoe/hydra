import { COLORS, color } from "./color.js";
import { Option } from "./types";

function generateHelp(
	optionList: { [key: string]: Option },
	commandList: { [key: string]: any},
	usageString: string
) {
	const maxLength = (arrString: string[]) => {
		return arrString.reduce(
			(acc, curr) => (curr.length > acc ? curr.length : acc),
			0
		);
	};
	const writePadded = (str: string, max: number) => str.padEnd(max + 3);
	const writeArray = (arr: string[][]) => {
		let lenName = maxLength(arr.map((x) => x[0]));
		let lenAlias = maxLength(arr.map((x) => x[1]));
		let lenDesc = maxLength(arr.map((x) => x[2]));
		let lenType = maxLength(arr.map((x) => x[3]));
		let lenCallback = maxLength(arr.map((x) => x[4]));

		for (const item of arr) {
			process.stdout.write(
				writePadded(item[0], lenName) +
					writePadded(item[1], lenAlias) +
					writePadded(item[2], lenDesc) +
					writePadded(item[3], lenType) +
					writePadded(item[4], lenCallback) +
					"\n"
			);
		}
	};

	let arr = [];
	for (const key in optionList) {
		let val = optionList[key];
		arr.push([
			color("--" + key, COLORS.CYAN),
			color(val.alias ? "-" + val.alias : "", COLORS.YELLOW),
			val.description,
			val.type ? `[${val.type.toUpperCase()}]` : "",
			""
		]);
	}

	for (const key in commandList) {
		let val = commandList[key];
		arr.push([
			color(key, COLORS.CYAN),
			"",
			val.description,
			"",
			color("[COMMAND]", COLORS.GREEN),
		]);
	}


	process.stdout.write((usageString || "Usage is as outlined below:") + "\n\n");
	writeArray(arr);
	process.exit(0);
}

export { generateHelp };
